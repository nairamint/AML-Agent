# Production Kubernetes Security Policies - Gatekeeper Configuration
# Comprehensive security policies for AML-KYC Agent deployment

---
# Gatekeeper Configuration
apiVersion: config.gatekeeper.sh/v1alpha1
kind: Config
metadata:
  name: config
  namespace: gatekeeper-system
spec:
  match:
    - excludedNamespaces: ["kube-system", "gatekeeper-system", "kube-public", "kube-node-lease"]
      processes: ["*"]
  validation:
    traces:
      - user:
          kind: "User"
        kind: "Admission"
  admission:
    - controllerName: "aml-security-controller"
      enforcementAction: "deny"
      processes: ["CREATE", "UPDATE"]

---
# AML Security Policy Constraint Template
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: amlsecuritypolicy
spec:
  crd:
    spec:
      names:
        kind: AMLSecurityPolicy
      validation:
        properties:
          requiredLabels:
            type: array
            items:
              type: string
          allowedImageRegistries:
            type: array
            items:
              type: string
          requiredSecurityContext:
            type: object
            properties:
              runAsNonRoot:
                type: boolean
              readOnlyRootFilesystem:
                type: boolean
              allowPrivilegeEscalation:
                type: boolean
              runAsUser:
                type: integer
              runAsGroup:
                type: integer
              fsGroup:
                type: integer
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package amlsecurity
        
        violation[{"msg": msg}] {
          required := input.parameters.requiredLabels
          provided := input.review.object.metadata.labels
          missing := required[_]
          not provided[missing]
          msg := sprintf("Missing required label: %v", [missing])
        }
        
        violation[{"msg": msg}] {
          input.review.object.spec.containers[_].securityContext.privileged
          msg := "Privileged containers not allowed in AML workloads"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.runAsNonRoot
          msg := "Container must run as non-root user"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.readOnlyRootFilesystem
          msg := "Container must have read-only root filesystem"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          container.securityContext.allowPrivilegeEscalation
          msg := "Privilege escalation not allowed"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          not container.securityContext.capabilities.drop[_] == "ALL"
          msg := "Container must drop ALL capabilities"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          image := container.image
          allowed_registries := input.parameters.allowedImageRegistries
          not startswith(image, allowed_registries[_])
          msg := sprintf("Image %v not from allowed registry", [image])
        }

---
# Pod Security Policy Constraint Template
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: podsecuritypolicy
spec:
  crd:
    spec:
      names:
        kind: PodSecurityPolicy
      validation:
        properties:
          allowedCapabilities:
            type: array
            items:
              type: string
          requiredDropCapabilities:
            type: array
            items:
              type: string
          allowedHostPaths:
            type: array
            items:
              type: string
          allowedHostPorts:
            type: array
            items:
              type: object
              properties:
                min:
                  type: integer
                max:
                  type: integer
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package podsecurity
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          capability := container.securityContext.capabilities.add[_]
          not capability in input.parameters.allowedCapabilities
          msg := sprintf("Capability %v not allowed", [capability])
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          required_drop := input.parameters.requiredDropCapabilities[_]
          not required_drop in container.securityContext.capabilities.drop
          msg := sprintf("Required capability drop missing: %v", [required_drop])
        }
        
        violation[{"msg": msg}] {
          volume := input.review.object.spec.volumes[_]
          volume.hostPath
          path := volume.hostPath.path
          allowed_paths := input.parameters.allowedHostPaths
          not startswith(path, allowed_paths[_])
          msg := sprintf("Host path %v not allowed", [path])
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          port := container.ports[_]
          port.hostPort
          host_port := port.hostPort
          allowed_ports := input.parameters.allowedHostPorts
          not host_port_in_range(host_port, allowed_ports[_])
          msg := sprintf("Host port %v not allowed", [host_port])
        }
        
        host_port_in_range(port, range) {
          port >= range.min
          port <= range.max
        }

---
# Network Policy Constraint Template
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: networkpolicy
spec:
  crd:
    spec:
      names:
        kind: NetworkPolicy
      validation:
        properties:
          requiredLabels:
            type: array
            items:
              type: string
          allowedIngressPorts:
            type: array
            items:
              type: integer
          allowedEgressPorts:
            type: array
            items:
              type: integer
          requiredNetworkPolicies:
            type: boolean
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package networkpolicy
        
        violation[{"msg": msg}] {
          input.parameters.requiredNetworkPolicies
          not input.review.object.kind == "NetworkPolicy"
          msg := "NetworkPolicy is required for this namespace"
        }
        
        violation[{"msg": msg}] {
          policy := input.review.object
          policy.spec.ingress[_].ports[_].port
          port := policy.spec.ingress[_].ports[_].port
          not port in input.parameters.allowedIngressPorts
          msg := sprintf("Ingress port %v not allowed", [port])
        }
        
        violation[{"msg": msg}] {
          policy := input.review.object
          policy.spec.egress[_].ports[_].port
          port := policy.spec.egress[_].ports[_].port
          not port in input.parameters.allowedEgressPorts
          msg := sprintf("Egress port %v not allowed", [port])
        }

---
# Resource Quota Constraint Template
apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: resourcequota
spec:
  crd:
    spec:
      names:
        kind: ResourceQuota
      validation:
        properties:
          maxCpu:
            type: string
          maxMemory:
            type: string
          maxPods:
            type: integer
          maxServices:
            type: integer
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package resourcequota
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          cpu_request := container.resources.requests.cpu
          memory_request := container.resources.requests.memory
          not cpu_request
          msg := "CPU request is required"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          memory_request := container.resources.requests.memory
          not memory_request
          msg := "Memory request is required"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          cpu_limit := container.resources.limits.cpu
          memory_limit := container.resources.limits.memory
          not cpu_limit
          msg := "CPU limit is required"
        }
        
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          memory_limit := container.resources.limits.memory
          not memory_limit
          msg := "Memory limit is required"
        }

---
# AML Security Policy Constraint
apiVersion: config.gatekeeper.sh/v1alpha1
kind: AMLSecurityPolicy
metadata:
  name: aml-security-policy
spec:
  match:
    - apiGroups: ["apps"]
      kinds: ["Deployment", "StatefulSet", "DaemonSet"]
      namespaces: ["aml-kyc-agent", "aml-backend", "aml-frontend"]
  parameters:
    requiredLabels:
      - "app.kubernetes.io/name"
      - "app.kubernetes.io/version"
      - "app.kubernetes.io/component"
      - "security.aml.io/compliance"
      - "security.aml.io/data-classification"
    allowedImageRegistries:
      - "registry.aml.io/"
      - "gcr.io/aml-project/"
      - "docker.io/aml/"
    requiredSecurityContext:
      runAsNonRoot: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000

---
# Pod Security Policy Constraint
apiVersion: config.gatekeeper.sh/v1alpha1
kind: PodSecurityPolicy
metadata:
  name: pod-security-policy
spec:
  match:
    - apiGroups: [""]
      kinds: ["Pod"]
      namespaces: ["aml-kyc-agent", "aml-backend", "aml-frontend"]
  parameters:
    allowedCapabilities: []
    requiredDropCapabilities:
      - "ALL"
    allowedHostPaths: []
    allowedHostPorts: []

---
# Network Policy Constraint
apiVersion: config.gatekeeper.sh/v1alpha1
kind: NetworkPolicy
metadata:
  name: network-policy
spec:
  match:
    - apiGroups: [""]
      kinds: ["Pod", "Service"]
      namespaces: ["aml-kyc-agent", "aml-backend", "aml-frontend"]
  parameters:
    requiredLabels:
      - "app.kubernetes.io/name"
      - "app.kubernetes.io/component"
    allowedIngressPorts:
      - 80
      - 443
      - 8080
      - 9090
      - 3000
    allowedEgressPorts:
      - 80
      - 443
      - 53
      - 5432
      - 6379
      - 9200
    requiredNetworkPolicies: true

---
# Resource Quota Constraint
apiVersion: config.gatekeeper.sh/v1alpha1
kind: ResourceQuota
metadata:
  name: resource-quota
spec:
  match:
    - apiGroups: [""]
      kinds: ["Pod"]
      namespaces: ["aml-kyc-agent", "aml-backend", "aml-frontend"]
  parameters:
    maxCpu: "4"
    maxMemory: "8Gi"
    maxPods: 20
    maxServices: 10
